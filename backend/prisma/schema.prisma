// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}


model User{
  id                   Int          @id @unique @default(autoincrement())
  username             String
  email                String
  isSuperAdmin         Boolean      @default(false)
  avatar               String

  socialAccountGroups  SocialAccountGroup[]
  uploads              Upload[]

  loginActivity        LoginActivity[]

  youtubeCredentials   YoutubeCredential[]
  facebookCredentials  FacebookCredential[]
  instagramCredentials InstagramCredential[] 
  xCredentials         XCredential[]
  tiktokCredentials    TikTokCredential[]

  createdAt            DateTime     @default(now())
  updatedAt            DateTime     @default(now())
  
}

model LoginActivity {
  id        String    @id @unique @default(uuid())
  ip        String
  device    String
  userId    Int
  user      User      @relation(fields: [userId], references: [id])
  createdAt DateTime  @default(now())
}

enum UploadStatus {
  Panding
  InProgress
  Successful
  Faild
}

model Upload {
  id                   String           @id @default(cuid())
  uploaderId           Int
  uploader             User          @relation(fields: [uploaderId], references: [id])
       
  UploadName           String
  videoUrl             String
  isAutoGenerated      Boolean       @default(true)
     
  timeStamsp           String[]  
       
  numberOfClips        Int
  uploadTime           DateTime[]
        
  groupId              Int
  socialAccountGroup   SocialAccountGroup     @relation(fields: [groupId], references: [id])

  uploadStatus         UploadStatus           @default(Panding) 

}

enum PlatformEnum {
  Youtube
  Facebook
  X
  TikTok
  Instagram
}

model SocialAccountGroup {
  id                   Int                  @unique @id @default(autoincrement())
  userId               Int
  groupUser            User                 @relation(fields: [userId], references: [id])

  groupName            String
  youtubeCredentials   YoutubeCredential[]
  facebookCredentials  FacebookCredential[]
  instagramCredentials InstagramCredential[]
  tiktokCredentials    TikTokCredential[]
  xCredentials         XCredential[]

  createdAt            DateTime              @default(now())
  updatedAt            DateTime              @updatedAt
                 
  uploads              Upload[]

}


model FacebookCredential {
  id                  String                    @id @default(cuid())
  //reference to the user
  userId              Int
  user                User                   @relation(fields: [userId], references: [id])
  
  groupId             Int
  group               SocialAccountGroup      @relation(fields: [groupId], references: [id])
  
  accessToken         String                 // OAuth Access Token for Facebook
  pageId              String                 // Facebook Page ID for the upload
  pageName            String     
  
}

model InstagramCredential {
  id                  String                    @id @default(cuid())
  //reference to the user
  userId              Int
  user                User                   @relation(fields: [userId], references: [id])
  
  groupId             Int
  group               SocialAccountGroup      @relation(fields: [groupId], references: [id])

  accessToken         String                 // OAuth Access Token for Instagram
  businessAccountId   String                 // Instagram Business Account ID
  accountName         String
  
}

model YoutubeCredential {
  id                  String                    @id @default(cuid())
  //reference to the user
  userId              Int
  user                User                   @relation(fields: [userId], references: [id])
  
  groupId             Int
  group               SocialAccountGroup      @relation(fields: [groupId], references: [id])

  channelId           String
  channelName         String
  
  accessToken         String                 // OAuth Access Token for YouTube
  refreshToken        String?
}

model XCredential {
  id                  String                    @id @default(cuid())
  userId              Int                    // Reference to the user
  user                User                   @relation(fields: [userId], references: [id])

  groupId             Int                    // Reference to the social account group
  group               SocialAccountGroup     @relation(fields: [groupId], references: [id])

  accessToken         String                 // OAuth Access Token for X (formerly Twitter)
  accessTokenSecret   String                 // OAuth Access Token Secret for X
  accountId           String                 // X Account ID

}

model TikTokCredential {
  id                  Int                    @id @default(autoincrement())
  userId              Int                    // Reference to the user
  user                User                   @relation(fields: [userId], references: [id])

  groupId             Int                    // Reference to the social account group
  group               SocialAccountGroup     @relation(fields: [groupId], references: [id])

  accessToken         String                 // OAuth Access Token for TikTok
  userIdTikTok        String                 // TikTok User ID
  username            String                 // TikTok Username

  clientKey           String?                // Client Key (optional for some use cases)

  
}

