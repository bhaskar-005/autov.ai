"use strict";
var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.CreateProject = exports.GetProjects = void 0;
const responseFormate_1 = require("../../utils/responseFormate");
const projectBodySchema_1 = require("../../zod/projectBodySchema");
const db_1 = __importDefault(require("../../utils/db"));
const GetProjects = (req, res) => __awaiter(void 0, void 0, void 0, function* () {
    const page = parseInt(req.params.page) || 1;
    //@ts-ignore
    const userId = req.userId;
    const limit = 6;
    const skip = (page - 1) * limit;
    try {
        const totalProjectCount = yield db_1.default.upload.count({
            where: {
                uploaderId: userId
            }
        });
        const Projects = yield db_1.default.upload.findMany({
            where: {
                uploader: userId
            },
            skip,
            take: limit,
            select: {
                uploaderId: true,
                uploader: {
                    select: {
                        email: true,
                        username: true,
                    }
                },
                UploadName: true,
                uploadDescription: true,
                videoUrl: true,
                isAutoGenerated: true,
                uploadDisplayImage: true,
                autoUpload: true,
                uploadTimeStamp: true,
                numberOfClips: true,
                groupId: true,
                socialAccountGroup: {
                    select: {
                        groupName: true,
                        groupDescription: true,
                    }
                },
                uploadStatus: true,
                speechLanguage: true,
            }
        });
        return responseFormate_1.response.message(res, "projects found.", 200, { Projects, totalProjectCount });
    }
    catch (error) {
        console.log(error);
        return responseFormate_1.response.error(res, "failed to get projects", 404);
    }
});
exports.GetProjects = GetProjects;
const CreateProject = (req, res) => __awaiter(void 0, void 0, void 0, function* () {
    try {
        const validateProjectData = projectBodySchema_1.projectBodySchema.parse(req.body);
        //@ts-ignore
        const userId = req.userId;
        const videoUrl = validateProjectData.video_url;
        const videoIdMatch = videoUrl.match(/(?:\?v=|\/embed\/|\.be\/|\/v\/|\/e\/|watch\?v=|&v=)([a-zA-Z0-9_-]{11})/);
        if (!videoIdMatch) {
            return responseFormate_1.response.error(res, "invalid video Link.", 404);
        }
        const createUpload = yield db_1.default.upload.create({
            data: {
                uploaderId: userId,
                UploadName: validateProjectData.project_name,
                videoUrl: validateProjectData.video_url,
                uploadDescription: validateProjectData.project_description,
                uploadDisplayImage: `https://img.youtube.com/vi/${videoIdMatch[1]}/default.jpg`,
                // isAutoGenerated: validateProjectData.is_auto_generated,
                autoUpload: validateProjectData.auto_upload,
                uploadTimeStamp: new Date(validateProjectData.upload_time),
                numberOfClips: validateProjectData.number_of_clips,
                groupId: parseInt(validateProjectData.name_space_id),
                speechLanguage: validateProjectData.speech_language
            }
        });
        //todo push it to the queue
        return responseFormate_1.response.message(res, "Project added to queue successfully", 200, { createUpload });
    }
    catch (error) {
        console.log(error);
        return responseFormate_1.response.error(res, "Error creating project.", 406);
    }
});
exports.CreateProject = CreateProject;
